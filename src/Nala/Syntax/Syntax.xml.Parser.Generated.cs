// <auto-generated />

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading;

using GosuParser;
using static GosuParser.Parser;
using Nala.Syntax;

namespace Nala
{
    public partial class NalaParser
    {
        public static Parser<SyntaxToken> DotTokenParser =>
            from _ in SyntaxTriviaParser
            from s in Char('.')
            from __ in SyntaxTriviaParser
            select new SyntaxToken(SyntaxKind.DotToken);

        public static Parser<SyntaxToken> OpenKeywordParser =>
            from _ in SyntaxTriviaParser
            from s in String("open")
            from __ in SyntaxTriviaParser
            select new SyntaxToken(SyntaxKind.OpenKeyword);

        public static Parser<SyntaxToken> NamespaceKeywordParser =>
            from _ in SyntaxTriviaParser
            from s in String("namespace")
            from __ in SyntaxTriviaParser
            select new SyntaxToken(SyntaxKind.NamespaceKeyword);

        public static Parser<SyntaxToken> TraitKeywordParser =>
            from _ in SyntaxTriviaParser
            from s in String("trait")
            from __ in SyntaxTriviaParser
            select new SyntaxToken(SyntaxKind.TraitKeyword);

        public static Parser<SyntaxToken> ClassKeywordParser =>
            from _ in SyntaxTriviaParser
            from s in String("class")
            from __ in SyntaxTriviaParser
            select new SyntaxToken(SyntaxKind.ClassKeyword);

        public static Parser<SyntaxToken> ObjectKeywordParser =>
            from _ in SyntaxTriviaParser
            from s in String("object")
            from __ in SyntaxTriviaParser
            select new SyntaxToken(SyntaxKind.ObjectKeyword);

        public static Parser<SyntaxToken> CaseKeywordParser =>
            from _ in SyntaxTriviaParser
            from s in String("case")
            from __ in SyntaxTriviaParser
            select new SyntaxToken(SyntaxKind.CaseKeyword);

        public static Parser<SyntaxToken> OpenBracketTokenParser =>
            from _ in SyntaxTriviaParser
            from s in Char('{')
            from __ in SyntaxTriviaParser
            select new SyntaxToken(SyntaxKind.OpenBracketToken);

        public static Parser<SyntaxToken> CloseBracketTokenParser =>
            from _ in SyntaxTriviaParser
            from s in Char('}')
            from __ in SyntaxTriviaParser
            select new SyntaxToken(SyntaxKind.CloseBracketToken);


        public static Parser<NameSyntax> NameParser =>
            new Parser<NameSyntax>[] { 
                SimpleNameParser.Select(x => (NameSyntax)x).Trace("SimpleName"),
                QualifiedNameParser.Select(x => (NameSyntax)x).Trace("QualifiedName")
           }.Choice();

        public static Parser<SimpleNameSyntax> SimpleNameParser =>
            from identifierName in IdentifierNameParser
            select (SimpleNameSyntax)identifierName;

        public static Parser<TypeSyntax> TypeParser =>
            from name in NameParser
            select (TypeSyntax)name;

        public static Parser<ExpressionSyntax> ExpressionParser =>
            from type in TypeParser
            select (ExpressionSyntax)type;

        public static Parser<BaseMemberDeclarationSyntax> BaseMemberDeclarationParser =>
            new Parser<BaseMemberDeclarationSyntax>[] { 
                MemberDeclarationParser.Select(x => (BaseMemberDeclarationSyntax)x).Trace("MemberDeclaration"),
                TopLevelMemberDeclarationParser.Select(x => (BaseMemberDeclarationSyntax)x).Trace("TopLevelMemberDeclaration")
           }.Choice();

        public static Parser<MemberDeclarationSyntax> MemberDeclarationParser =>
            new Parser<MemberDeclarationSyntax>[] { 
           }.Choice();

        public static Parser<TopLevelMemberDeclarationSyntax> TopLevelMemberDeclarationParser =>
            new Parser<TopLevelMemberDeclarationSyntax>[] { 
                TraitDeclarationParser.Select(x => (TopLevelMemberDeclarationSyntax)x).Trace("TraitDeclaration"),
                ObjectDeclarationParser.Select(x => (TopLevelMemberDeclarationSyntax)x).Trace("ObjectDeclaration"),
                ClassDeclarationParser.Select(x => (TopLevelMemberDeclarationSyntax)x).Trace("ClassDeclaration"),
                BaseMethodDeclarationParser.Select(x => (TopLevelMemberDeclarationSyntax)x).Trace("BaseMethodDeclaration")
           }.Choice();

        public static Parser<BaseMethodDeclarationSyntax> BaseMethodDeclarationParser =>
            new Parser<BaseMethodDeclarationSyntax>[] { 
           }.Choice();

        public static Parser<IdentifierNameSyntax> IdentifierNameParser =>
            from identifier in IdentifierTokenParser
            select SyntaxFactory.IdentifierName(identifier);

        public static Parser<QualifiedNameSyntax> QualifiedNameParser =>
            from left in NameParser.Trace("Name")
            from dotToken in DotTokenParser
            from right in SimpleNameParser.Trace("SimpleName")
            select SyntaxFactory.QualifiedName(left, dotToken, right);

        public static Parser<CompilationUnitSyntax> CompilationUnitParser =>
            from @namespace in NamespaceDeclarationParser.ZeroOrOne().Trace("NamespaceDeclaration")
            from usings in SyntaxListParser(OpenDirectiveParser).Trace("OpenDirective")
            from members in SyntaxListParser(TopLevelMemberDeclarationParser).Trace("TopLevelMemberDeclaration")
            from endOfFileToken in EndOfFileTokenParser
            select SyntaxFactory.CompilationUnit(@namespace.FirstOrDefault(), usings, members, endOfFileToken);

        public static Parser<NamespaceDeclarationSyntax> NamespaceDeclarationParser =>
            from namespaceKeyword in NamespaceKeywordParser
            from name in NameParser.Trace("Name")
            select SyntaxFactory.NamespaceDeclaration(namespaceKeyword, name);

        public static Parser<OpenDirectiveSyntax> OpenDirectiveParser =>
            from openKeyword in OpenKeywordParser
            from name in NameParser.Trace("Name")
            select SyntaxFactory.OpenDirective(openKeyword, name);

        public static Parser<TraitDeclarationSyntax> TraitDeclarationParser =>
            from traitKeyword in TraitKeywordParser
            from name in SimpleNameParser.Trace("SimpleName")
            from openBracketToken in OpenBracketTokenParser
            from members in SyntaxListParser(BaseMemberDeclarationParser).Trace("BaseMemberDeclaration")
            from closeBracketToken in CloseBracketTokenParser
            select SyntaxFactory.TraitDeclaration(traitKeyword, name, openBracketToken, members, closeBracketToken);

        public static Parser<ObjectDeclarationSyntax> ObjectDeclarationParser =>
            from objectKeyword in ObjectKeywordParser
            from name in SimpleNameParser.Trace("SimpleName")
            from openBracketToken in OpenBracketTokenParser
            from members in SyntaxListParser(BaseMemberDeclarationParser).Trace("BaseMemberDeclaration")
            from closeBracketToken in CloseBracketTokenParser
            select SyntaxFactory.ObjectDeclaration(objectKeyword, name, openBracketToken, members, closeBracketToken);

        public static Parser<ClassDeclarationSyntax> ClassDeclarationParser =>
            from caseKeyword in CaseKeywordParser.OrElse(NoneParser)
            from classKeyword in ClassKeywordParser
            from name in SimpleNameParser.Trace("SimpleName")
            from openBracketToken in OpenBracketTokenParser
            from members in SyntaxListParser(BaseMemberDeclarationParser).Trace("BaseMemberDeclaration")
            from closeBracketToken in CloseBracketTokenParser
            select SyntaxFactory.ClassDeclaration(caseKeyword, classKeyword, name, openBracketToken, members, closeBracketToken);
    }
}
