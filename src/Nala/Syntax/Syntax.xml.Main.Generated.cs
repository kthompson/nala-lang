// <auto-generated />

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading;


namespace Nala
{
    using Nala.Syntax;


  public partial class SyntaxVisitor<TResult>
  {
    /// <summary>Called when the visitor visits a IdentifierNameSyntax node.</summary>
    public virtual TResult VisitIdentifierName(IdentifierNameSyntax node)
    {
      return this.DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a QualifiedNameSyntax node.</summary>
    public virtual TResult VisitQualifiedName(QualifiedNameSyntax node)
    {
      return this.DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a CompilationUnitSyntax node.</summary>
    public virtual TResult VisitCompilationUnit(CompilationUnitSyntax node)
    {
      return this.DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a NamespaceDeclarationSyntax node.</summary>
    public virtual TResult VisitNamespaceDeclaration(NamespaceDeclarationSyntax node)
    {
      return this.DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a OpenDirectiveSyntax node.</summary>
    public virtual TResult VisitOpenDirective(OpenDirectiveSyntax node)
    {
      return this.DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a TraitDeclarationSyntax node.</summary>
    public virtual TResult VisitTraitDeclaration(TraitDeclarationSyntax node)
    {
      return this.DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a ObjectDeclarationSyntax node.</summary>
    public virtual TResult VisitObjectDeclaration(ObjectDeclarationSyntax node)
    {
      return this.DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a ClassDeclarationSyntax node.</summary>
    public virtual TResult VisitClassDeclaration(ClassDeclarationSyntax node)
    {
      return this.DefaultVisit(node);
    }
  }

  public partial class SyntaxVisitor
  {
    /// <summary>Called when the visitor visits a IdentifierNameSyntax node.</summary>
    public virtual void VisitIdentifierName(IdentifierNameSyntax node)
    {
      this.DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a QualifiedNameSyntax node.</summary>
    public virtual void VisitQualifiedName(QualifiedNameSyntax node)
    {
      this.DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a CompilationUnitSyntax node.</summary>
    public virtual void VisitCompilationUnit(CompilationUnitSyntax node)
    {
      this.DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a NamespaceDeclarationSyntax node.</summary>
    public virtual void VisitNamespaceDeclaration(NamespaceDeclarationSyntax node)
    {
      this.DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a OpenDirectiveSyntax node.</summary>
    public virtual void VisitOpenDirective(OpenDirectiveSyntax node)
    {
      this.DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a TraitDeclarationSyntax node.</summary>
    public virtual void VisitTraitDeclaration(TraitDeclarationSyntax node)
    {
      this.DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a ObjectDeclarationSyntax node.</summary>
    public virtual void VisitObjectDeclaration(ObjectDeclarationSyntax node)
    {
      this.DefaultVisit(node);
    }

    /// <summary>Called when the visitor visits a ClassDeclarationSyntax node.</summary>
    public virtual void VisitClassDeclaration(ClassDeclarationSyntax node)
    {
      this.DefaultVisit(node);
    }
  }

  public partial class SyntaxRewriter : SyntaxVisitor<SyntaxNode>
  {
    public override SyntaxNode VisitIdentifierName(IdentifierNameSyntax node)
    {
      var identifier = this.VisitToken(node.Identifier);
      return node.Update(identifier);
    }

    public override SyntaxNode VisitQualifiedName(QualifiedNameSyntax node)
    {
      var left = (NameSyntax)this.Visit(node.Left);
      var dotToken = this.VisitToken(node.DotToken);
      var right = (SimpleNameSyntax)this.Visit(node.Right);
      return node.Update(left, dotToken, right);
    }

    public override SyntaxNode VisitCompilationUnit(CompilationUnitSyntax node)
    {
      var @namespace = (NamespaceDeclarationSyntax)this.Visit(node.Namespace);
      var usings = this.VisitList(node.Usings);
      var members = this.VisitList(node.Members);
      var endOfFileToken = this.VisitToken(node.EndOfFileToken);
      return node.Update(@namespace, usings, members, endOfFileToken);
    }

    public override SyntaxNode VisitNamespaceDeclaration(NamespaceDeclarationSyntax node)
    {
      var namespaceKeyword = this.VisitToken(node.NamespaceKeyword);
      var name = (NameSyntax)this.Visit(node.Name);
      return node.Update(namespaceKeyword, name);
    }

    public override SyntaxNode VisitOpenDirective(OpenDirectiveSyntax node)
    {
      var openKeyword = this.VisitToken(node.OpenKeyword);
      var name = (NameSyntax)this.Visit(node.Name);
      return node.Update(openKeyword, name);
    }

    public override SyntaxNode VisitTraitDeclaration(TraitDeclarationSyntax node)
    {
      var traitKeyword = this.VisitToken(node.TraitKeyword);
      var name = (SimpleNameSyntax)this.Visit(node.Name);
      var openBracketToken = this.VisitToken(node.OpenBracketToken);
      var members = this.VisitList(node.Members);
      var closeBracketToken = this.VisitToken(node.CloseBracketToken);
      return node.Update(traitKeyword, name, openBracketToken, members, closeBracketToken);
    }

    public override SyntaxNode VisitObjectDeclaration(ObjectDeclarationSyntax node)
    {
      var objectKeyword = this.VisitToken(node.ObjectKeyword);
      var name = (SimpleNameSyntax)this.Visit(node.Name);
      var openBracketToken = this.VisitToken(node.OpenBracketToken);
      var members = this.VisitList(node.Members);
      var closeBracketToken = this.VisitToken(node.CloseBracketToken);
      return node.Update(objectKeyword, name, openBracketToken, members, closeBracketToken);
    }

    public override SyntaxNode VisitClassDeclaration(ClassDeclarationSyntax node)
    {
      var caseKeyword = this.VisitToken(node.CaseKeyword);
      var classKeyword = this.VisitToken(node.ClassKeyword);
      var name = (SimpleNameSyntax)this.Visit(node.Name);
      var openBracketToken = this.VisitToken(node.OpenBracketToken);
      var members = this.VisitList(node.Members);
      var closeBracketToken = this.VisitToken(node.CloseBracketToken);
      return node.Update(caseKeyword, classKeyword, name, openBracketToken, members, closeBracketToken);
    }
  }

  public static partial class SyntaxFactory
  {
    /// <summary>Creates a new IdentifierNameSyntax instance.</summary>
    public static IdentifierNameSyntax IdentifierName(SyntaxToken identifier)
    {
      switch (identifier.Kind)
      {
        case SyntaxKind.IdentifierToken:
          break;
        default:
          throw new ArgumentException("identifier");
      }
      return new IdentifierNameSyntax(SyntaxKind.IdentifierName, identifier);
    }


    /// <summary>Creates a new QualifiedNameSyntax instance.</summary>
    public static QualifiedNameSyntax QualifiedName(NameSyntax left, SyntaxToken dotToken, SimpleNameSyntax right)
    {
      if (left == null)
        throw new ArgumentNullException(nameof(left));
      switch (dotToken.Kind)
      {
        case SyntaxKind.DotToken:
          break;
        default:
          throw new ArgumentException("dotToken");
      }
      if (right == null)
        throw new ArgumentNullException(nameof(right));
      return new QualifiedNameSyntax(SyntaxKind.QualifiedName, left, dotToken, right);
    }


    /// <summary>Creates a new QualifiedNameSyntax instance.</summary>
    public static QualifiedNameSyntax QualifiedName(NameSyntax left, SimpleNameSyntax right)
    {
      return SyntaxFactory.QualifiedName(left, SyntaxFactory.Token(SyntaxKind.DotToken), right);
    }

    /// <summary>Creates a new CompilationUnitSyntax instance.</summary>
    public static CompilationUnitSyntax CompilationUnit(NamespaceDeclarationSyntax @namespace, SyntaxList<OpenDirectiveSyntax> usings, SyntaxList<TopLevelMemberDeclarationSyntax> members, SyntaxToken endOfFileToken)
    {
      switch (endOfFileToken.Kind)
      {
        case SyntaxKind.EndOfFileToken:
          break;
        default:
          throw new ArgumentException("endOfFileToken");
      }
      return new CompilationUnitSyntax(SyntaxKind.CompilationUnit, @namespace, usings.Node, members.Node, endOfFileToken);
    }


    /// <summary>Creates a new CompilationUnitSyntax instance.</summary>
    public static CompilationUnitSyntax CompilationUnit(NamespaceDeclarationSyntax @namespace, SyntaxList<OpenDirectiveSyntax> usings, SyntaxList<TopLevelMemberDeclarationSyntax> members)
    {
      return SyntaxFactory.CompilationUnit(@namespace, usings, members, SyntaxFactory.Token(SyntaxKind.EndOfFileToken));
    }

    /// <summary>Creates a new CompilationUnitSyntax instance.</summary>
    public static CompilationUnitSyntax CompilationUnit(NamespaceDeclarationSyntax @namespace = default(NamespaceDeclarationSyntax))
    {
      return SyntaxFactory.CompilationUnit(@namespace, default(SyntaxList<OpenDirectiveSyntax>), default(SyntaxList<TopLevelMemberDeclarationSyntax>), SyntaxFactory.Token(SyntaxKind.EndOfFileToken));
    }

    /// <summary>Creates a new NamespaceDeclarationSyntax instance.</summary>
    public static NamespaceDeclarationSyntax NamespaceDeclaration(SyntaxToken namespaceKeyword, NameSyntax name)
    {
      switch (namespaceKeyword.Kind)
      {
        case SyntaxKind.NamespaceKeyword:
          break;
        default:
          throw new ArgumentException("namespaceKeyword");
      }
      if (name == null)
        throw new ArgumentNullException(nameof(name));
      return new NamespaceDeclarationSyntax(SyntaxKind.NamespaceDeclaration, namespaceKeyword, name);
    }


    /// <summary>Creates a new NamespaceDeclarationSyntax instance.</summary>
    public static NamespaceDeclarationSyntax NamespaceDeclaration(NameSyntax name)
    {
      return SyntaxFactory.NamespaceDeclaration(SyntaxFactory.Token(SyntaxKind.NamespaceKeyword), name);
    }

    /// <summary>Creates a new OpenDirectiveSyntax instance.</summary>
    public static OpenDirectiveSyntax OpenDirective(SyntaxToken openKeyword, NameSyntax name)
    {
      switch (openKeyword.Kind)
      {
        case SyntaxKind.OpenKeyword:
          break;
        default:
          throw new ArgumentException("openKeyword");
      }
      if (name == null)
        throw new ArgumentNullException(nameof(name));
      return new OpenDirectiveSyntax(SyntaxKind.OpenDirective, openKeyword, name);
    }


    /// <summary>Creates a new OpenDirectiveSyntax instance.</summary>
    public static OpenDirectiveSyntax OpenDirective(NameSyntax name)
    {
      return SyntaxFactory.OpenDirective(SyntaxFactory.Token(SyntaxKind.OpenKeyword), name);
    }

    /// <summary>Creates a new TraitDeclarationSyntax instance.</summary>
    public static TraitDeclarationSyntax TraitDeclaration(SyntaxToken traitKeyword, SimpleNameSyntax name, SyntaxToken openBracketToken, SyntaxList<BaseMemberDeclarationSyntax> members, SyntaxToken closeBracketToken)
    {
      switch (traitKeyword.Kind)
      {
        case SyntaxKind.TraitKeyword:
          break;
        default:
          throw new ArgumentException("traitKeyword");
      }
      if (name == null)
        throw new ArgumentNullException(nameof(name));
      switch (openBracketToken.Kind)
      {
        case SyntaxKind.OpenBracketToken:
          break;
        default:
          throw new ArgumentException("openBracketToken");
      }
      switch (closeBracketToken.Kind)
      {
        case SyntaxKind.CloseBracketToken:
          break;
        default:
          throw new ArgumentException("closeBracketToken");
      }
      return new TraitDeclarationSyntax(SyntaxKind.TraitDeclaration, traitKeyword, name, openBracketToken, members.Node, closeBracketToken);
    }


    /// <summary>Creates a new TraitDeclarationSyntax instance.</summary>
    public static TraitDeclarationSyntax TraitDeclaration(SimpleNameSyntax name, SyntaxList<BaseMemberDeclarationSyntax> members)
    {
      return SyntaxFactory.TraitDeclaration(SyntaxFactory.Token(SyntaxKind.TraitKeyword), name, SyntaxFactory.Token(SyntaxKind.OpenBracketToken), members, SyntaxFactory.Token(SyntaxKind.CloseBracketToken));
    }

    /// <summary>Creates a new TraitDeclarationSyntax instance.</summary>
    public static TraitDeclarationSyntax TraitDeclaration(SimpleNameSyntax name)
    {
      return SyntaxFactory.TraitDeclaration(SyntaxFactory.Token(SyntaxKind.TraitKeyword), name, SyntaxFactory.Token(SyntaxKind.OpenBracketToken), default(SyntaxList<BaseMemberDeclarationSyntax>), SyntaxFactory.Token(SyntaxKind.CloseBracketToken));
    }

    /// <summary>Creates a new ObjectDeclarationSyntax instance.</summary>
    public static ObjectDeclarationSyntax ObjectDeclaration(SyntaxToken objectKeyword, SimpleNameSyntax name, SyntaxToken openBracketToken, SyntaxList<BaseMemberDeclarationSyntax> members, SyntaxToken closeBracketToken)
    {
      switch (objectKeyword.Kind)
      {
        case SyntaxKind.ObjectKeyword:
          break;
        default:
          throw new ArgumentException("objectKeyword");
      }
      if (name == null)
        throw new ArgumentNullException(nameof(name));
      switch (openBracketToken.Kind)
      {
        case SyntaxKind.OpenBracketToken:
          break;
        default:
          throw new ArgumentException("openBracketToken");
      }
      switch (closeBracketToken.Kind)
      {
        case SyntaxKind.CloseBracketToken:
          break;
        default:
          throw new ArgumentException("closeBracketToken");
      }
      return new ObjectDeclarationSyntax(SyntaxKind.ObjectDeclaration, objectKeyword, name, openBracketToken, members.Node, closeBracketToken);
    }


    /// <summary>Creates a new ObjectDeclarationSyntax instance.</summary>
    public static ObjectDeclarationSyntax ObjectDeclaration(SimpleNameSyntax name, SyntaxList<BaseMemberDeclarationSyntax> members)
    {
      return SyntaxFactory.ObjectDeclaration(SyntaxFactory.Token(SyntaxKind.ObjectKeyword), name, SyntaxFactory.Token(SyntaxKind.OpenBracketToken), members, SyntaxFactory.Token(SyntaxKind.CloseBracketToken));
    }

    /// <summary>Creates a new ObjectDeclarationSyntax instance.</summary>
    public static ObjectDeclarationSyntax ObjectDeclaration(SimpleNameSyntax name)
    {
      return SyntaxFactory.ObjectDeclaration(SyntaxFactory.Token(SyntaxKind.ObjectKeyword), name, SyntaxFactory.Token(SyntaxKind.OpenBracketToken), default(SyntaxList<BaseMemberDeclarationSyntax>), SyntaxFactory.Token(SyntaxKind.CloseBracketToken));
    }

    /// <summary>Creates a new ClassDeclarationSyntax instance.</summary>
    public static ClassDeclarationSyntax ClassDeclaration(SyntaxToken caseKeyword, SyntaxToken classKeyword, SimpleNameSyntax name, SyntaxToken openBracketToken, SyntaxList<BaseMemberDeclarationSyntax> members, SyntaxToken closeBracketToken)
    {
      switch (caseKeyword.Kind)
      {
        case SyntaxKind.CaseKeyword:
        case SyntaxKind.None:
          break;
        default:
          throw new ArgumentException("caseKeyword");
      }
      switch (classKeyword.Kind)
      {
        case SyntaxKind.ClassKeyword:
          break;
        default:
          throw new ArgumentException("classKeyword");
      }
      if (name == null)
        throw new ArgumentNullException(nameof(name));
      switch (openBracketToken.Kind)
      {
        case SyntaxKind.OpenBracketToken:
          break;
        default:
          throw new ArgumentException("openBracketToken");
      }
      switch (closeBracketToken.Kind)
      {
        case SyntaxKind.CloseBracketToken:
          break;
        default:
          throw new ArgumentException("closeBracketToken");
      }
      return new ClassDeclarationSyntax(SyntaxKind.ClassDeclaration, caseKeyword, classKeyword, name, openBracketToken, members.Node, closeBracketToken);
    }


    /// <summary>Creates a new ClassDeclarationSyntax instance.</summary>
    public static ClassDeclarationSyntax ClassDeclaration(SimpleNameSyntax name, SyntaxList<BaseMemberDeclarationSyntax> members)
    {
      return SyntaxFactory.ClassDeclaration(default(SyntaxToken), SyntaxFactory.Token(SyntaxKind.ClassKeyword), name, SyntaxFactory.Token(SyntaxKind.OpenBracketToken), members, SyntaxFactory.Token(SyntaxKind.CloseBracketToken));
    }

    /// <summary>Creates a new ClassDeclarationSyntax instance.</summary>
    public static ClassDeclarationSyntax ClassDeclaration(SimpleNameSyntax name)
    {
      return SyntaxFactory.ClassDeclaration(default(SyntaxToken), SyntaxFactory.Token(SyntaxKind.ClassKeyword), name, SyntaxFactory.Token(SyntaxKind.OpenBracketToken), default(SyntaxList<BaseMemberDeclarationSyntax>), SyntaxFactory.Token(SyntaxKind.CloseBracketToken));
    }
  }
}
